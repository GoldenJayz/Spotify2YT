const express = require("express");
const app = express();
const request = require("request");
const querystring = require("querystring");
const fs = require("fs");
const readline = require("readline");
const { google } = require("googleapis");
const { cachedDataVersionTag } = require("v8");
const OAuth2 = google.auth.OAuth2;
const bodyParser = require("body-parser");
const multer = require("multer");
const upload = multer();

const client_id = "";
const client_secret = "";

var playlistname;
var youtubename;
var songnames = [];

app.use(upload.array());
app.use(express.static("public"));
app.use(
  express.urlencoded({
    extended: true,
  })
);

app.get("/google", (req, res) => {
  var SCOPES = [
    "https://www.googleapis.com/auth/youtube.readonly",
    "https://www.googleapis.com/auth/youtube",
    "https://www.googleapis.com/auth/plus.login",
    "https://www.googleapis.com/auth/youtube.force-ssl",
  ];
  var TOKEN_DIR =
    (process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE) +
    "/.credentials/";
  var TOKEN_PATH = TOKEN_DIR + "youtube-nodejs-quickstart.json";

  const timer = (ms) => new Promise((res) => setTimeout(res, ms));

  fs.readFile(
    "client_secret.json",
    function processClientSecrets(err, content) {
      if (err) {
        console.log("Error loading client secret file: " + err);
        return;
      }
      authorize(JSON.parse(content), getChannel);
    }
  );

  function authorize(credentials, callback) {
    var clientSecret = credentials.web.client_secret;
    var clientId = credentials.web.client_id;
    var redirectUrl = credentials.web.redirect_uris[0];
    var oauth2Client = new OAuth2(clientId, clientSecret, redirectUrl);
    fs.readFile(TOKEN_PATH, function (err, token) {
      if (err) {
        getNewToken(oauth2Client, callback);
      } else {
        oauth2Client.credentials = JSON.parse(token);
        callback(oauth2Client);
      }
    });
  }

  function getNewToken(oauth2Client, callback) {
    var authUrl = oauth2Client.generateAuthUrl({
      access_type: "offline",
      scope: SCOPES,
    });
    console.log("Authorize this app by visiting this url: ", authUrl);
    var rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });
    rl.question("Enter the code from that page here: ", function (code) {
      rl.close();
      oauth2Client.getToken(code, function (err, token) {
        if (err) {
          console.log("Error while trying to retrieve access token", err);
          return;
        }
        oauth2Client.credentials = token;
        storeToken(token);
        callback(oauth2Client);
      });
    });
  }

  function storeToken(token) {
    try {
      fs.mkdirSync(TOKEN_DIR);
    } catch (err) {
      if (err.code != "EEXIST") {
        throw err;
      }
    }
    fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
      if (err) throw err;
      console.log("Token stored to " + TOKEN_PATH);
    });
  }

  var playlistid;

  async function getChannel(auth) {
    var service = google.youtube({ version: "v3", auth: auth });
    service.playlists.insert(
      {
        part: "snippet, status",
        resource: {
          snippet: {
            title: youtubename,
            description: "Playlist generated by Spotify2YT",
          },
          status: {
            privacyStatus: "private",
          },
        },
      },
      function (err, response) {
        if (err) {
          console.log("The API returned an error: " + err);
          return;
        }
        console.log(response.data.id);
        playlistid = response.data.id;
      }
    );

    var videoids = [];

    for (var item in songnames) {
      console.log(item);
      service.search.list(
        {
          part: ["snippet"],
          maxResults: 1,
          order: "relevance",
          q: songnames[item],
        },
        function (err, response) {
          if (err) {
            console.log("There was an error!\n" + err);
          } else {
            var data = response.data.items[0].id.videoId;
            videoids.push(data);
            console.log(videoids);
          }
        }
      );
    }

    await timer(1500);

    for (var a in videoids) {
      console.log(videoids[a]);
      await timer(1000);
      service.playlistItems.insert(
        {
          part: "snippet",
          resource: {
            snippet: {
              playlistId: playlistid,
              resourceId: {
                kind: "youtube#video",
                videoId: videoids[a],
              },
            },
          },
        },
        function (err, response) {
          if (err) {
            console.error(err);
          } else {
            console.log(response);
            res.send("done :)");
          }
        }
      );
    }
  }
});

app.get("/login", function (req, res) {
  var scopes =
    "user-read-private user-read-email ugc-image-upload playlist-read-private playlist-read-collaborative";
  res.redirect(
    "https://accounts.spotify.com/authorize" +
      "?response_type=code" +
      "&client_id=" +
      clientid +
      (scopes ? "&scope=" + encodeURIComponent(scopes) : "") +
      "&redirect_uri=" +
      encodeURIComponent("http://localhost:6969/callback")
  );
});

app.get("/callback", function (req, res) {
  var code = req.query.code || null;
  var authOptions = {
    url: "https://accounts.spotify.com/api/token",
    form: {
      code: code,
      redirect_uri: "http://localhost:6969/callback",
      grant_type: "authorization_code",
    },
    headers: {
      Authorization:
        "Basic " +
        new Buffer(client_id + ":" + client_secret).toString("base64"),
    },
    json: true,
  };

  request.post(authOptions, function (error, response, body) {
    if (!error && response.statusCode === 200) {
      var access_token = body.access_token,
        refresh_token = body.refresh_token;

      var userid = "";

      var options = {
        url: "https://api.spotify.com/v1/me",
        headers: { Authorization: "Bearer " + access_token },
        json: true,
      };
      request.get(options, function (error, response, body) {
        userid = body.id;
      });
      setTimeout(function () {
        var requrl =
          "https://api.spotify.com/v1/users/" + userid + "/playlists";
        request.get(
          {
            url: requrl,
            headers: { Authorization: "Bearer " + access_token },
            json: true,
          },
          function (error, response, body) {
            // if error
            for (var item in body.items) {
              if (body.items[item].name == playlistname) {
                var link = body.items[item].tracks.href;
                request.get(
                  {
                    url: link,
                    headers: { Authorization: "Bearer " + access_token },
                    json: true,
                  },
                  function (error, response, a) {
                    for (var track in a.items) {
                      console.log(a.items[track].track.name);
                      songnames.push(a.items[track].track.name);
                    }
                    console.log(songnames);
                  }
                );
                // change metal to the users input
                //add an else
              } else {
                console.log(
                  "there was an error: " + error + playlistname + response
                );
                console.log(body.items[0].owner);
              }
            }
          }
        );
      }, 1000);

      res.redirect("/back");
    } else {
      res.redirect(
        "/#" +
          querystring.stringify({
            error: "invalid_token",
          })
      );
    }
  });
});

app.get("/", function (req, res) {
  res.sendFile(__dirname + "/views/index.html");
});

app.post("/submit", (req, res) => {
  console.log(req.body);
  playlistname = req.body.spotify;
  youtubename = req.body.yt;
  console.log(playlistname + youtubename);
  res.redirect("/login");
  res.end();
});

app.get("/back", (req, res) => {
  res.sendFile(__dirname + "/views/back.html");
});

const listener = app.listen("6969", () => {
  console.log("Your app is listening on port " + listener.address().port);
});
